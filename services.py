#!/usr/bin/env python3
import os
from typing import Optional

EON = os.path.isfile('/EON')
RESERVED_PORT = 8022  # sshd
STARTING_PORT = 9001


def new_port(port: int):
  port += STARTING_PORT
  return port + 1 if port >= RESERVED_PORT else port


class Service:
  def __init__(self, port: int, should_log: bool, frequency: float, decimation: Optional[int] = None):
    self.port = port
    self.should_log = should_log
    self.frequency = frequency
    self.decimation = decimation


services = {
  # "sensorEvents": (True, 100., 100),
  # "gpsNMEA": (True, 9.),
  # "deviceState": (True, 2., 1),
  # "can": (True, 100.),
  # "controlsState": (True, 100., 100),
  # "pandaState": (True, 2., 1),
  # "sendcan": (True, 100.),
  # "logMessage": (True, 0.),
  # "androidLog": (True, 0., 1),
  # "procLog": (True, 0.5),
  # "clocks": (True, 1., 1),
  # "managerState": (True, 2., 1),
  # "joystick1": (True, 0.),
  # "joystick2": (False, 0.),

  "sensorEvents": (True, 100., 100),
  "gpsNMEA": (True, 9.),
  "deviceState": (True, 2., 1), # should_log, frequency, decimation (optional)
  "can": (True, 100.),
  "controlsState": (True, 100., 100),
  "pandaState": (True, 2., 1),
  "sendcan": (True, 100.),
  "logMessage": (True, 0.),
  "liveCalibration": (True, 4., 4),
  "androidLog": (True, 0., 1),
  "procLog": (True, 0.5),
  "clocks": (True, 1., 1),
  "managerState": (True, 2., 1),

  "jostick2": (False, 0.),
  "joystick1": (False, 0.),
}
service_list = {name: Service(new_port(idx), *vals) for  # type: ignore
                idx, (name, vals) in enumerate(services.items())}


def build_header():
  h = ""
  h += "/* THIS IS AN AUTOGENERATED FILE, PLEASE EDIT services.py */\n"
  h += "#ifndef __SERVICES_H\n"
  h += "#define __SERVICES_H\n"
  h += "struct service { char name[0x100]; int port; bool should_log; int frequency; int decimation; };\n"
  h += "static struct service services[] = {\n"
  for k, v in service_list.items():
    should_log = "true" if v.should_log else "false"
    decimation = -1 if v.decimation is None else v.decimation
    h += '  { .name = "%s", .port = %d, .should_log = %s, .frequency = %d, .decimation = %d },\n' % \
         (k, v.port, should_log, v.frequency, decimation)
  h += "};\n"
  h += "#endif\n"
  return h


if __name__ == "__main__":
  print(build_header())